require:
  - rubocop-performance
  - rubocop-rake
  - rubocop-rspec

AllCops:
  DisplayCopNames: true
  TargetRubyVersion: 3.0
  Exclude:
    - gemfiles/vendor/**/*
    - vendor/**/*

#
# Special cases
#

Lint/EmptyWhen:
  Exclude:
    - lib/curlybars/node/path.rb

Naming/MethodParameterName:
  Exclude:
    - spec/integration/spec_helper.rb

Performance/FixedSize:
  Exclude:
    - spec/**/*

RSpec/MultipleExpectations:
  Exclude:
    - spec/curlybars/template_handler_spec.rb
    - spec/integration/cache_spec.rb

RSpec/NestedGroups:
  Exclude:
    - spec/**/*

Security/Eval:
  Exclude:
    - spec/integration/**/*

Style/ClassAndModuleChildren:
  Exclude:
    - spec/dummy/**/*

#
# Configured cops
#

# Align the arguments of a method call if they span more than one line.
Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation

# Indentation of when in a case/when/[else/]end.
Layout/CaseIndentation:
  EnforcedStyle: end

# Align ends correctly.
Layout/EndAlignment:
  EnforcedStyleAlignWith: variable

# Checks the indentation of the first parameter in a method call.
Layout/FirstArgumentIndentation:
  EnforcedStyle: consistent

# Checks the indentation of the first key in a hash literal.
Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

# Align the elements of a hash literal if they span more than one line.
Layout/HashAlignment:
  EnforcedLastArgumentHashStyle: ignore_implicit

# Checks indentation of binary operations that span more than one line.
Layout/MultilineOperationIndentation:
  EnforcedStyle: indented

# Align the parameters of a method call if they span more than one line.
Layout/ParameterAlignment:
  EnforcedStyle: with_fixed_indentation

# Use alias instead of alias_method.
Style/Alias:
  EnforcedStyle: prefer_alias_method

# Checks the formatting of empty method definitions.
Style/EmptyMethod:
  EnforcedStyle: expanded

# Enforce the use of Kernel#sprintf, Kernel#format or String#%.
Style/FormatString:
  EnforcedStyle: percent

# Enforce using either `%<token>s` or `%{token}`
Style/FormatStringToken:
  EnforcedStyle: unannotated

#
# Disabled cops
#

Layout/DotPosition:
  Enabled: false

Layout/LineLength:
  Enabled: false

Lint/MissingSuper:
  Enabled: false

Lint/StructNewOverride:
  Enabled: false

Lint/UnusedBlockArgument:
  Enabled: false

Lint/UnusedMethodArgument:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/ClassLength:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/ModuleLength:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

Metrics/ParameterLists:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false

Naming/MemoizedInstanceVariableName:
  Enabled: false

Naming/RescuedExceptionsVariableName:
  Enabled: false

RSpec/DescribeClass:
  Enabled: false

RSpec/DescribedClass:
  Enabled: false

RSpec/ExampleLength:
  Enabled: false

RSpec/InstanceVariable:
  Enabled: false

RSpec/VerifiedDoubles:
  Enabled: false

Style/Documentation:
  Enabled: false

Style/EmptyLiteral:
  Enabled: false

Style/ExplicitBlockArgument:
  Enabled: false

Style/FrozenStringLiteralComment:
  Enabled: false

Style/GuardClause:
  Enabled: false

Style/IfUnlessModifier:
  Enabled: false

Style/Next:
  Enabled: false

Style/NumericPredicate:
  Enabled: false

Style/PerlBackrefs:
  Enabled: false

Style/RaiseArgs:
  Enabled: false

Style/SignalException:
  Enabled: false

Style/StringLiterals:
  Enabled: false

Style/SymbolArray:
  Enabled: false

Style/TrivialAccessors:
  Enabled: false

Style/WordArray:
  Enabled: false
